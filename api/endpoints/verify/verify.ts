/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * Octagon AI API
 * API for Octagon AI's backend services.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import { customInstance } from '../../../services/custom-axios-instance';
import type { ErrorType } from '../../../services/custom-axios-instance';



export const verifyCreate = (
    id: number,
 ) => {
      
      
      return customInstance<void>(
      {url: `/verify/${id}/`, method: 'POST'
    },
      );
    }
  


export const getVerifyCreateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof verifyCreate>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof verifyCreate>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof verifyCreate>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  verifyCreate(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type VerifyCreateMutationResult = NonNullable<Awaited<ReturnType<typeof verifyCreate>>>
    
    export type VerifyCreateMutationError = ErrorType<unknown>

    export const useVerifyCreate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof verifyCreate>>, TError,{id: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof verifyCreate>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getVerifyCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    